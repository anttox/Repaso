1. Ejecute process-run.py con las siguientes banderas: -l 5:100,5:100. ¿Cuál debería ser la utilización de la CPU (por ejemplo, el porcentaje de tiempo que la CPU está en uso)? Utiliza las opciones-c y-p para comprobar si has acertado.
* python3 process-run.py -l 5:100,5:100 -c -p
* Utilización de la CPU: 100.00%
Explicación:
La CPU está ocupada todo el tiempo, ya que ambos procesos utilizan la CPU continuamente durante su tiempo de ejecución. Cada proceso realiza 5 instrucciones de CPU una tras otra, sumando un total de 10 unidades de tiempo donde la CPU está en uso.

2. Ahora ejecuta con estas banderas: ./process-run.py-l 4:100,1:0. Estas banderas especifican un proceso con 4 instrucciones (todas para usar la CPU), y otro que simplemente emite una E/S y espera a que termine.
* python3 process-run.py -l 4:100,1:0 -c -p
¿Cuánto tardan en completarse ambos procesos? Utiliza-c y-p para saber si has acertado.
* Tiempo total para completar ambos procesos: 11 unidades de tiempo
Explicación:
El primer proceso (PID: 0) realiza 4 instrucciones de CPU y termina en el tiempo 5. El segundo proceso (PID: 1) realiza una instrucción de I/O y espera hasta el tiempo 10 para completar su I/O. El proceso completo toma 11 unidades de tiempo debido al tiempo de espera para completar la I/O.o

3. Cambia el orden de los procesos:-l 1:0,4:100. ¿Qué ocurre ahora? ¿Es importante cambiar el orden? ¿Por qué? (Como siempre, utiliza-c y-para ver si tenías razón)
* python3 process-run.py -l 1:0,4:100 -c -p
* Tiempo total para completar ambos procesos: 7 unidades de tiempo
Explicación:
El primer proceso (PID: 0) realiza una instrucción de I/O y espera hasta el tiempo 6 para completar su I/O. El segundo proceso (PID: 1) realiza 4 instrucciones de CPU consecutivas. El cambio en el orden de los procesos reduce el tiempo total a 7 unidades de tiempo, ya que la CPU no queda inactiva mientras espera a que se complete la I/O.

4. Ahora exploraremos algunas de las otras banderas. Una bandera importante es-S, que determina cómo reacciona el sistema cuando un proceso es proceso realiza una E/S. Con la bandera fijada a SWITCH ON END, el sistema NO cambiará a otro proceso mientras uno está haciendo una E/S, en en lugar de esperar hasta que el proceso esté completamente terminado. ¿Qué ocurre cuando ejecuta los siguientes dos procesos (-l 1:0,4:100-c-SWITCH ON END), uno haciendo E/S y el otro haciendo trabajo de CPU?
Flags: -S SWITCH_ON_END configura el sistema para no cambiar de proceso mientras uno está haciendo E/S.
* python3 process-run.py -l 1:0,4:100 -c -S SWITCH_ON_END -p
* Resultado: El proceso de E/S bloquea hasta completar, luego el proceso de CPU ejecuta.
Explicación:
Con SWITCH_ON_END, el sistema no cambia a otro proceso mientras uno está haciendo I/O. El primer proceso (PID: 0) realiza una instrucción de I/O y el sistema espera hasta que termine (en el tiempo 7) antes de cambiar al segundo proceso (PID: 1) que realiza 4 instrucciones de CPU. Esto resulta en un tiempo total de 11 unidades.

5. Ahora, ejecute los mismos procesos, pero con el comportamiento de conmutación establecido para cambiar a otro proceso siempre que uno esté ESPERANDOI/O(-l 1:0,4:100-c-S SWITCH ON E/S). ¿Qué ocurre ahora? Utilice c y -p para confirmar que has acertado.
* python3 process-run.py -l 5:100,5:100
* Utilización de la CPU: 100.00%
5.1 Explicación:
La CPU está ocupada todo el tiempo, ya que ambos procesos utilizan la CPU continuamente durante su tiempo de ejecución. Cada proceso realiza 5 instrucciones de CPU una tras otra, sumando un total de 10 unidades de tiempo donde la CPU está en uso.

* python3 process-run.py -l 1:0,4:100
* Tiempo total para completar ambos procesos: 11 unidades de tiempo
5.2 Explicación:
El primer proceso (PID: 0) realiza 4 instrucciones de CPU y termina en el tiempo 5. El segundo proceso (PID: 1) realiza una instrucción de I/O y espera hasta el tiempo 10 para completar su I/O. El proceso completo toma 11 unidades de tiempo debido al tiempo de espera para completar la I/O.

* python3 process-run.py -l 1:0,4:100
* Tiempo total para completar ambos procesos: 7 unidades de tiempo
5.3 Explicación:
El primer proceso (PID: 0) realiza una instrucción de I/O y espera hasta el tiempo 6 para completar su I/O. El segundo proceso (PID: 1) realiza 4 instrucciones de CPU consecutivas. El cambio en el orden de los procesos reduce el tiempo total a 7 unidades de tiempo, ya que la CPU no queda inactiva mientras espera a que se complete la I/O.

* python3 process-run.py -l 1:0,4:100 -c -S SWITCH_ON_END -p
5.4 Explicación:
Con SWITCH_ON_END, el sistema no cambia a otro proceso mientras uno está haciendo I/O. El primer proceso (PID: 0) realiza una instrucción de I/O y el sistema espera hasta que termine (en el tiempo 7) antes de cambiar al segundo proceso (PID: 1) que realiza 4 instrucciones de CPU. Esto resulta en un tiempo total de 11 unidades.

* python3 process-run.py -l 1:0,4:100 -c -S SWITCH ON IO -p
5.5 Explicación:
Con SWITCH_ON_IO, el sistema cambia a otro proceso siempre que uno está esperando por I/O. Esto permite que el segundo proceso (PID: 1) realice sus 4 instrucciones de CPU mientras el primer proceso (PID: 0) espera que se complete la I/O. El tiempo total es de 7 unidades, mejorando la utilización de los recursos del sistema.

6. Otro comportamiento importante es qué hacer cuando finaliza una E/S. E/S. Con-I IO EJECUTAR LATER, cuando una E/S se completa, el proceso que la emitió no se ejecuta necesariamente de inmediato. proceso que la emitió no se ejecuta necesariamente de inmediato, sino que lo queque se estaba ejecutando en ese momento. ¿Qué ocurre cuando esta combinación de procesos? (./proceso-ejecutado.py-l 3:0,5:100,5:100,5:100-S SWITCH ON IO RUN IO-c-p-I LATER) ¿Se utilizan eficazmente los recursos del sistema?
* python3 process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -c -p -I IO_RUN_LATER
Explicación:
Con IO_RUN_LATER, cuando una I/O se completa, el proceso que la emitió no se ejecuta inmediatamente. En su lugar, el proceso en ejecución continúa hasta que termina o se bloquea. El proceso (PID: 0) realiza 3 instrucciones de I/O, mientras que los otros procesos realizan instrucciones de CPU. Esto resulta en una utilización de CPU del 67.74% y una utilización de I/O del 48.39%, con un tiempo total de 31 unidades.

7. Flags: -I IO_RUN_IMMEDIATE configura el sistema para ejecutar inmediatamente un proceso que completa una E/S.
python3 process-run.py -l 3:0,5:100,5:100,5:100 -S SWITCH_ON_IO -c -p -I IO_RUN_IMMEDIATE
Resultado: Mejora la utilización de recursos, procesos ejecutan inmediatamente tras completar E/S.
Explicación:
Con IO_RUN_IMMEDIATE, cuando una I/O se completa, el proceso que la emitió se ejecuta inmediatamente. Esto reduce el tiempo total a 26 unidades y mejora la utilización de la CPU al 80.77% y la utilización de I/O al 57.69%. Esta estrategia asegura que los procesos que completan I/O puedan continuar su ejecución sin demoras, mejorando la eficiencia del sistema.

8. Ahora ejecuta con algunos procesos generados aleatoriamente utilizando flags-s 1-l 3:50,3:50 o-s 2-l 3:50,3:50 o-s 3-l 3:50, 3:50. Comprueba si puedes predecir el resultado de la traza. ¿Qué ocurre ocurre cuando se utiliza bandera-I IO EJECUTAR f lag-I IO RUN INMEDIATA frente a la¿MÁS TARDE? ¿Qué ocurre cuando se utiliza la bandera-S SWITCH EN IO frente a-S SWITCH ON FIN?
* python3 process-run.py -s 1 -l 3:50,3:50 -c -p
* python3 process-run.py -s 2 -l 3:50,3:50 -c -p
* python3 process-run.py -s 3 -l 3:50,3:50 -c -p
Observaciones:
* Variabilidad: El tiempo total varía entre las diferentes semillas debido a la naturaleza aleatoria de la generación de procesos.
* Utilización de la CPU y I/O: Las diferentes configuraciones de semillas y las operaciones I/O influyen en la utilización de los recursos del sistema. La segunda semilla muestra la mayor utilización de I/O (87.50%), mientras que la tercera semilla tiene la menor utilización de CPU (50.00%).
* Importancia de la secuencia: La secuencia y el tiempo de ejecución de las operaciones de I/O afectan significativamente el rendimiento del sistema.
Comparar el comportamiento de -I IO RUN IMMEDIATE y -I IO RUN LATER:
* python3 process-run.py -s 1 -l 3:50,3:50 -c -p -I IO_RUN_IMMEDIATE
* python3 process-run.py -s 1 -l 3:50,3:50 -c -p -I IO_RUN_LATER

Comparar el comportamiento de -S SWITCH ON IO y -S SWITCH ON END:
* python3 process-run.py -s 1 -l 3:50,3:50 -c -p -S SWITCH_ON_IO
* python3 process-run.py -s 1 -l 3:50,3:50 -c -p -S SWITCH_ON_END

Resultado:
* IO RUN IMMEDIATE mejora la utilización de la CPU.
* SWITCH ON IO cambia de proceso durante E/S, mejor utilización de CPU; SWITCH ON END espera a que el proceso termine.

Explicación:
Con IO_RUN_LATER, los resultados son idénticos a los de IO_RUN_IMMEDIATE en esta ejecución específica, con una utilización de la CPU del 53.33% y una utilización de la I/O del 66.67%, y un tiempo total de 15 unidades. Esto puede ocurrir si la secuencia y los tiempos de los eventos I/O no varían significativamente entre ambas configuraciones.
